{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPf+RFjksdOimGc+mPFRo0n"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#04-1 로지스틱 회귀"],"metadata":{"id":"I3qYs-QPnkJj"}},{"cell_type":"markdown","source":["## 럭키백의 확률\n","\n","럭키백에 들어갈 수 있는 생선은 7개이다.\n","\n","럭키백에 들어간 생선의 크기, 무게 등이 주어졌을 때 7개 생선에 대한 확률을 출력해야 한다. 이번에는 길이, 높이, 두께 외에도 대각선 길이와 무게도 사용할 수 있다."],"metadata":{"id":"asxLMu7JnzAe"}},{"cell_type":"markdown","source":["###데이터 준비\n","\n","그렇다면 확률은 숫자이니 회귀 문제인가?\n","7개의 생선에 대한 문제라면 분류 아닐까?\n","\n","이러한 생각을 해보자.\n","\" k-최근접 이웃은 주변 이웃을 찾아주니까 이웃의 클래스 비율을 확률이라고 출력하면 되지 않을까?\n","\n","\n","사이킷런의 k-최근접 이웃 분류기도 이와 동일한 방식으로 클래스 확률을 계산하여 제공한다. 그렇다면 데이터를 준비하고 k-최근접 이웃 분류기로 럭키백에 들어간 생선의 확률을 계산해보자."],"metadata":{"id":"X5tQ1Uwxoh-f"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"S73Tscg9nZef","executionInfo":{"status":"ok","timestamp":1705381481050,"user_tz":-540,"elapsed":1132,"user":{"displayName":"박민호","userId":"13332700724784488473"}},"outputId":"e7b2962f-f87d-476b-c9d3-32bf21e0d49b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Species  Weight  Length  Diagonal   Height   Width\n","0   Bream   242.0    25.4      30.0  11.5200  4.0200\n","1   Bream   290.0    26.3      31.2  12.4800  4.3056\n","2   Bream   340.0    26.5      31.1  12.3778  4.6961\n","3   Bream   363.0    29.0      33.5  12.7300  4.4555\n","4   Bream   430.0    29.0      34.0  12.4440  5.1340"],"text/html":["\n","  <div id=\"df-545a72e5-f1db-4904-87b7-a198c90ca9c3\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Species</th>\n","      <th>Weight</th>\n","      <th>Length</th>\n","      <th>Diagonal</th>\n","      <th>Height</th>\n","      <th>Width</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Bream</td>\n","      <td>242.0</td>\n","      <td>25.4</td>\n","      <td>30.0</td>\n","      <td>11.5200</td>\n","      <td>4.0200</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Bream</td>\n","      <td>290.0</td>\n","      <td>26.3</td>\n","      <td>31.2</td>\n","      <td>12.4800</td>\n","      <td>4.3056</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Bream</td>\n","      <td>340.0</td>\n","      <td>26.5</td>\n","      <td>31.1</td>\n","      <td>12.3778</td>\n","      <td>4.6961</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Bream</td>\n","      <td>363.0</td>\n","      <td>29.0</td>\n","      <td>33.5</td>\n","      <td>12.7300</td>\n","      <td>4.4555</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Bream</td>\n","      <td>430.0</td>\n","      <td>29.0</td>\n","      <td>34.0</td>\n","      <td>12.4440</td>\n","      <td>5.1340</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-545a72e5-f1db-4904-87b7-a198c90ca9c3')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-545a72e5-f1db-4904-87b7-a198c90ca9c3 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-545a72e5-f1db-4904-87b7-a198c90ca9c3');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-54861481-d095-42e0-9d0a-7b0631d9d731\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-54861481-d095-42e0-9d0a-7b0631d9d731')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-54861481-d095-42e0-9d0a-7b0631d9d731 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":1}],"source":["import pandas as pd\n","fish = pd.read_csv('https://bit.ly/fish_csv_data')\n","fish.head()"]},{"cell_type":"markdown","source":["어떠한 종류의 생선이 있는지 Species 열에서 고유한 값을 추출해 보자.\n","판다스의 unique() 함수를 이용해보자."],"metadata":{"id":"pmCiRdV6pwFv"}},{"cell_type":"code","source":["print(pd.unique(fish['Species']))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dnc1O5t-p282","executionInfo":{"status":"ok","timestamp":1705381481050,"user_tz":-540,"elapsed":6,"user":{"displayName":"박민호","userId":"13332700724784488473"}},"outputId":"875d149f-4baf-458b-f14b-7cdd771fb1d4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['Bream' 'Roach' 'Whitefish' 'Parkki' 'Perch' 'Pike' 'Smelt']\n"]}]},{"cell_type":"markdown","source":["이 데이터프레임에서 Species 열을 타깃으로 만들고 나머지 5개 열은 입력 데이터로 사용한다.  데이터프레임에서 열을 선택하는 방법은 간단하다. 데이터프레임에서 원하는 열을 리스트로 나열하면 된다. Species 열을 빼고 나머지 5개 열을 선택해보자."],"metadata":{"id":"mrI1lpm7qBYr"}},{"cell_type":"code","source":["fish_input = fish[['Weight','Length','Diagonal','Height','Width']].to_numpy()"],"metadata":{"id":"l9CpnGVVqiqt"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["데이터프레임에서 여러 열을 선택하면 새로운 데이터프레임이 반환된다. 이를 to_numpy() 메서드로 넘파이 배열로 바꾸어 fish_input에 저장했다. fish_input에 5개의 특성이 잘 저장되었는지 확인해보자."],"metadata":{"id":"Tqb19fy4qr3E"}},{"cell_type":"code","source":["print(fish_input[:5])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dBUIXu5TrG4U","executionInfo":{"status":"ok","timestamp":1705381481051,"user_tz":-540,"elapsed":6,"user":{"displayName":"박민호","userId":"13332700724784488473"}},"outputId":"e44ce0b7-e42b-4044-e3ee-c05da00660d7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[242.      25.4     30.      11.52     4.02  ]\n"," [290.      26.3     31.2     12.48     4.3056]\n"," [340.      26.5     31.1     12.3778   4.6961]\n"," [363.      29.      33.5     12.73     4.4555]\n"," [430.      29.      34.      12.444    5.134 ]]\n"]}]},{"cell_type":"markdown","source":["입력 데이터가 잘 준비되었다.\n","이번에는 동일한 방식으로 타깃 데이터를 만들자."],"metadata":{"id":"LvKh6OtvrPXz"}},{"cell_type":"code","source":["fish_target = fish['Species'].to_numpy()"],"metadata":{"id":"PadvrY9mrZel"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["이제 데이터를 훈련 세트와 테스트 세트로 나눈다.\n","머신러닝에서는 기본으로 데이터 세트 2개가 필요하다."],"metadata":{"id":"Xx6KtPoYrm9Q"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","train_input, test_input, train_target, test_target = train_test_split(fish_input, fish_target, random_state = 42)"],"metadata":{"id":"eB1bW42WsFn-"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["그다음 사이킷런의 StandardScaler 클래스를 사용해 훈련 세트와 테스트 세트를  표준화 전처리 한다. 여기서도 훈련 세트의 통계 값으로 테스트 세트를 변환해야 한다."],"metadata":{"id":"AaOb0A1esdFB"}},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","ss = StandardScaler()\n","ss.fit(train_input)\n","train_scaled = ss.transform(train_input)\n","test_scaled = ss.transform(test_input)"],"metadata":{"id":"u_mSkGgktD1S"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["필요한 데이터를 모두 준비했다. 이제 k-최근접 이웃 분류기로 테스트 세트에 들어 있는 확률을 보겠다."],"metadata":{"id":"YcnIjEftuMyz"}},{"cell_type":"markdown","source":["###  k-최근접 이웃 분류기의 확률 예측\n","\n","사이킷런의 KNeighborsClassifier 클래스 객체를 만들고 훈련 세트로 모델을 훈련한 다음 훈련 세트와 테스트 세트의 점수를 확인해보자. 최근접 이웃 개수인 k를 3으로 지정하여 사용한다."],"metadata":{"id":"ceSHAsN1ug8A"}},{"cell_type":"code","source":["from sklearn.neighbors import KNeighborsClassifier\n","kn = KNeighborsClassifier(n_neighbors = 3)\n","kn.fit(train_scaled, train_target)\n","print(kn.score(train_scaled, train_target))\n","print(kn.score(test_scaled, test_target))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_xOysx5Duzj5","executionInfo":{"status":"ok","timestamp":1705381482514,"user_tz":-540,"elapsed":6,"user":{"displayName":"박민호","userId":"13332700724784488473"}},"outputId":"046054c4-6311-4ffb-8e74-be1d3802feda"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.8907563025210085\n","0.85\n"]}]},{"cell_type":"markdown","source":["여기에서는 클래스 확률을 배우는 것이 목적이므로 훈련 세트와 테스트 세트 점수에 대해서는 잊도록하자.\n","\n","앞서 fish 데이터프레임에서 7개의 생선이 있었던 것을 기억하자.\n","타깃 데이터를 만들 때 fish['Speicies']를 상요해 만들었기 때문에 훈련 세트와 테스트 세트의 타깃 데이터에도 7개의 생선 종류가 들어가 있다.\n","이렇게 타깃 데이터에 2개 이상의 클래스가 포함된 문제를 다중 분류(multi - class classification)라고 부른다.\n","\n","하지만 조금 전 코드에서 보듯이 2장에서 만들었던 이진 분류와 모델을 만들고 훈련하는 방식은 동일하다. 이진 분류를 사용했을 때는 양성 클래스와 음성 클래스를 각각 1과 0으로 지정하여 타깃 데이터를 만들었다. 다중 분류에서도 타깃값을 숫자로 바꾸어 입력할 수 있지만 사이킷런에서는 편리하게 문자열로된 타깃값을 그대로 사용할 수 있다.\n","\n","이때 주의할 점은 타깃값을 그대로 사이킷런 모델에 전달하면 순서가 자동으로 알파벳 순으로 매겨진다. 따라서 pd.unique(fish['Species'])로 출력했던 순서와 다르다. KNeighnorsClassifier에서 정렬된 타깃값은 classes_ 속성에 저장되어 있다."],"metadata":{"id":"Y7uiOTpMwG-U"}},{"cell_type":"code","source":["print(kn.classes_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VjmtCcfS2kkp","executionInfo":{"status":"ok","timestamp":1705381482514,"user_tz":-540,"elapsed":5,"user":{"displayName":"박민호","userId":"13332700724784488473"}},"outputId":"671a064b-cd17-441f-ace2-74c9be26d7d9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['Bream' 'Parkki' 'Perch' 'Pike' 'Roach' 'Smelt' 'Whitefish']\n"]}]},{"cell_type":"markdown","source":["'Bream'이 첫 번째 클래스, 'Parkki'가 두 번째 클래스가 되는 식이다. predict() 메서드는 친절하게도 타깃값으로 예측을 출력한다. 테스트 세트에 있는 처음 5개의 샘플의 타깃값을 예측해보자."],"metadata":{"id":"hYEH5Fvw2pne"}},{"cell_type":"code","source":["print(kn.predict(test_scaled[:5]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ponbjA9f3Twf","executionInfo":{"status":"ok","timestamp":1705381482514,"user_tz":-540,"elapsed":4,"user":{"displayName":"박민호","userId":"13332700724784488473"}},"outputId":"7a4f4288-3898-4316-81e5-4a467cacef5f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['Perch' 'Smelt' 'Pike' 'Perch' 'Perch']\n"]}]},{"cell_type":"markdown","source":["이 5개 샘플에 대한 예측은 어떤 확률로 만들어졌을까? 사이킷런의 분류 모델은 predict_proba() 메서드로 클래스별 확률값을 반환한다. 테스트 세트에 있는 처음 5개의 샘플에 대한 확률을 출력해 보자. 넘파이 round() 함수는 기본으로 소수점 첫째 자리에서 반올림을 하는데, decimals 매개변수로 유지할 소수점 아래 자릿수를 지정할 수 있다."],"metadata":{"id":"TopQfE5_3lC2"}},{"cell_type":"code","source":["import numpy as np\n","proba = kn.predict_proba(test_scaled[:5])\n","print(np.round(proba, decimals = 3))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aj8SrZ2Y5VTL","executionInfo":{"status":"ok","timestamp":1705381482514,"user_tz":-540,"elapsed":4,"user":{"displayName":"박민호","userId":"13332700724784488473"}},"outputId":"1986b8ce-9740-4fbc-cace-ce4eb8782504"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0.    0.    1.    0.    0.    0.    0.   ]\n"," [0.    0.    0.    0.    0.    1.    0.   ]\n"," [0.    0.    0.    1.    0.    0.    0.   ]\n"," [0.    0.    0.667 0.    0.333 0.    0.   ]\n"," [0.    0.    0.667 0.    0.333 0.    0.   ]]\n"]}]},{"cell_type":"markdown","source":["predict_proba() 메서드의 출력 순서는 앞서 보았던 classes_속성과 같다.\n","즉 첫 번째 열이 'Bream'에 대한 확률, 두 번째 열이 'Parkki'에 대한 확률이다.\n","\n","이 모델이 계산한 확률이 가장 가까운 이웃의 비율이 맞는지 확인해 보자. 네 번째 샘플의 츼근접 이웃의 클래스를 확인해보자."],"metadata":{"id":"2uLeiX6m5xN-"}},{"cell_type":"code","source":["distances, indexes = kn.kneighbors(test_scaled[3:4])\n","print(train_target[indexes])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DohiJJYz6F4M","executionInfo":{"status":"ok","timestamp":1705381482514,"user_tz":-540,"elapsed":3,"user":{"displayName":"박민호","userId":"13332700724784488473"}},"outputId":"6fcee954-19d5-43af-8dfb-65ca47180664"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[['Roach' 'Perch' 'Perch']]\n"]}]},{"cell_type":"markdown","source":["이 샘플의 이웃은 다섯 번째 클래스인 'Roach'가 1개이고 세 번째 클래스인 'Perch'가 2개이다. 따라서 다섯 번재 클래스에 대한 확률은 1/3 = 0.3333이고 세 번째 클래스에 대한 확률은 2/3 = 0.6667이 된다. 앞서 출력한 네 번째 샘플의 클래스 확률과 같다.\n","\n","이렇게 아주 쉽게 클래스 확률을 예측했다. 번거로운 계산은 사이킷런이 수행해 주므로 우리는 predict_proba() 메서드를 호출하면 그만이다.\n","\n","그런데 뭔가 좀 이상하다. 잠시 생각해 보면 3개의 최근접 이웃을 사용하기 때문에 가능한 확률은 0/3, 1/3, 2/3, 3/3이 전부다. 만약 럭키백의 확률을 이렇게만 표시한다면 마케팅팀이 만족하지 않을 것 같다. 뭔가 더 좋은 방법을 찾아야 할 것 같다."],"metadata":{"id":"U3JEOHHs6OpW"}},{"cell_type":"markdown","source":["##로지스틱 회귀\n","\n","로지스틱 회귀(logistic regression)는 이름은 회귀이지만 분류 모델이다. 이 알고리즘은 선형 회귀와 동일하게 선형 방정식을 학습한다.\n","\n","시그모이드 함수(sigmoid function) = 로지스틱 함수(logistic function) 를 사용한다.\n","\n"],"metadata":{"id":"Cp3SbrWQ7TD4"}},{"cell_type":"markdown","source":["Φ = $\\frac{1}{1+e^{-z}}$"],"metadata":{"id":"sduJcRSq7urv"}},{"cell_type":"markdown","source":["위의 함수가 시그모이드 함수이다. 선형방정식의 출력 z의 음수를 사용해 자연 상수 e를 거듭제곱하고 1을 더한 값의 역수를 취한다.\n","\n","이렇게 복잡하게 계산한 이유는 아래와 같은 그래프를 만들 수 있기 때문이다."],"metadata":{"id":"GtsAGbd9-_4G"}},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","\n","z = np.arange(-5, 5, 0.1)\n","phi = 1 / (1 + np.exp(-z))\n","\n","plt.plot(z, phi)\n","plt.xlabel('z')\n","plt.ylabel('phi')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"id":"JurLnHHT_PqO","executionInfo":{"status":"ok","timestamp":1705381483936,"user_tz":-540,"elapsed":1424,"user":{"displayName":"박민호","userId":"13332700724784488473"}},"outputId":"3be78527-de97-4993-9b5e-fda359464e95"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["z가 무한하게 큰 음수일 경우 이 함수는 0에 가까워지고, z에 무한하게 큰 양수가 될 때는 1에 가까워진다. z가 0이 될 때는 0.5가 된다. z가 어떤 값이 되더라도 Φ는 절대로 0 ~ 1 사이의 범위를 벗어날 수 없다. 그렇다면 0 ~ 1 사이 값을 0~100%까지 확률로 해석할 수 있다.\n","\n","이제 로지스틱 회귀 모델을 훈련해 보자. 사이킷런에는 로지스틱 회귀 모델인 LogisticRegression 클래스가 준비되어 있다.\n","\n","훈련하기 전에 간단한 이진 분류를 수행해보자. 이진 분류일 경우 시그모이드 함수의 출력이 0.5보다 크면 양성 클래스, 0.5 보다 작으면 음성클래스로 판단한다. 그럼 먼저 도미와 빙어 2개를 사용해서 이진 분류를 수행해보자."],"metadata":{"id":"6yygEhvn_iB-"}},{"cell_type":"markdown","source":["###로지스틱 회귀로 이진 분류 수행하기\n","넘파이 배열은 True, False 값을 전달하여 행을 선택할 수 있다. 이를 불리언 인덱싱(boolean indexing) 이라고 한다. 간단한 예를 보면 금방 이해할 수 있다. 다음과 같이 'A'에서 'E'까지 5개의 원소로 이루어진 배열이 있다. 여기서 'A'와 'C'만 골라내려면 첫 번째와 세 번째 원소만 True이고 나머지 원소는 모두 False인 배열을 전달하면 된다."],"metadata":{"id":"_Fe8sj_TGkmo"}},{"cell_type":"code","source":["char_arr = np.array(['A', 'B', 'C', 'D', 'E'])\n","print(char_arr[[True, False, True, False, False]])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kXOpqhsOHFyH","executionInfo":{"status":"ok","timestamp":1705381483936,"user_tz":-540,"elapsed":11,"user":{"displayName":"박민호","userId":"13332700724784488473"}},"outputId":"f8dbc5a4-c83d-4e69-8570-c2fa00a7e343"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['A' 'C']\n"]}]},{"cell_type":"markdown","source":["이와 같은 방식을 사용해 훈련세트에서 도미(Bream)와 빙어(Smelt)의 행만 골라내자. 비교 연산자를 사용하면 도미와 빙어의 행을 모두 True로 만들 수 있다. 예를 들어 도미인 행을 골라내려면 train_target == 'Bream'과 같이 쓴다. 이 비교식은 train_target 배열에서 'Bream'인 것은 True  이고 그 외는 모두 False인 배열을 반환한다. 도미와 빙어에 대한 비교 결과를 비트 OR 연산자 (|)를 사용해 도미와 빙어에 대한 행만 골라낼 수 있다."],"metadata":{"id":"BFzIb_ZkHiVC"}},{"cell_type":"code","source":["bream_smelt_indexes = (train_target == 'Bream') | (train_target == 'Smelt')\n","train_bream_smelt = train_scaled[bream_smelt_indexes]\n","target_bream_smelt = train_target[bream_smelt_indexes]"],"metadata":{"id":"xlTFsbXoH-sZ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["bream_smelt_indexes 배열은 도미와 빙어일 경우 True이고 그 외는 모두 False 값이 들어가 있다. 따라서 이 배열을 사용해 train_scaled와 train_target 배열에 불리언 인덱싱을 적용하면 손쉽게 도미와 빙어 데이터만 골라낼 수 있다.\n","\n","이제 이 데이터로 로지스틱 회귀모델을 훈련해 보자."],"metadata":{"id":"mh15mJABIktv"}},{"cell_type":"code","source":["from sklearn.linear_model import LogisticRegression\n","lr = LogisticRegression()\n","lr.fit(train_bream_smelt, target_bream_smelt)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":75},"id":"IrLrtMN5G0r-","executionInfo":{"status":"ok","timestamp":1705381483937,"user_tz":-540,"elapsed":10,"user":{"displayName":"박민호","userId":"13332700724784488473"}},"outputId":"13b63109-d0ef-4011-b9d0-301f2205b677"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LogisticRegression()"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":16}]},{"cell_type":"markdown","source":[" 훈련한 모델을 사용해 train_bream_smelt에 있는 처음 5개 샘플을 예측해보자."],"metadata":{"id":"Jhga996EJdnS"}},{"cell_type":"code","source":["print(lr.predict(train_bream_smelt[:5]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kUmHh712JmHq","executionInfo":{"status":"ok","timestamp":1705381483937,"user_tz":-540,"elapsed":9,"user":{"displayName":"박민호","userId":"13332700724784488473"}},"outputId":"0e52060b-00f0-4428-f185-25bcb7652bb2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['Bream' 'Smelt' 'Bream' 'Bream' 'Bream']\n"]}]},{"cell_type":"markdown","source":["두 번째 샘플을 제외하고는 모두 도미로 예측했다. KNeighborsClassifier와 마찬가지로 예측 확률은 predict_proba() 메서드에서 제공한다. train_bream_smelt에서 처음 5개의 샘플의 예측 확률을 출력해보자."],"metadata":{"id":"T2W-R6HwJt7q"}},{"cell_type":"code","source":["print(lr.predict_proba(train_bream_smelt[:5]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oxGTjdWkKqjz","executionInfo":{"status":"ok","timestamp":1705381483937,"user_tz":-540,"elapsed":9,"user":{"displayName":"박민호","userId":"13332700724784488473"}},"outputId":"8a3e2981-a13d-4e61-ab22-d66765779ad1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0.99759855 0.00240145]\n"," [0.02735183 0.97264817]\n"," [0.99486072 0.00513928]\n"," [0.98584202 0.01415798]\n"," [0.99767269 0.00232731]]\n"]}]},{"cell_type":"markdown","source":["샘플마다 2개의 확률이 출력되었다. 첫 번째 열이 음성 클래스(0)에 대한 확률이고 두 번째 열이 양성 클래스(1)에 대한 확률입니다. 그럼 Bream과 Smelt 중에 어떤 것이 양성 클래스일까?\n","\n","앞서 k-최근접 이웃 분류기에서 보았듯이 사이킷런은 타깃값을 알파벳순으로 정렬하여 사용한다. classes_ 속성에서 확인해보자.\n"],"metadata":{"id":"Q9O9AFDFK2OX"}},{"cell_type":"code","source":["print(lr.classes_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lVUgWR1ZLMV_","executionInfo":{"status":"ok","timestamp":1705381483937,"user_tz":-540,"elapsed":8,"user":{"displayName":"박민호","userId":"13332700724784488473"}},"outputId":"c616fb9a-c52f-408c-90dd-7f13d500c38a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['Bream' 'Smelt']\n"]}]},{"cell_type":"markdown","source":["빙어(smelt)가 양성 클래스이다. predict_proba()메서드가 반환한 배열 값을 보면 두 번째 샘플만 양성 클래스인 빙어의 확률이 높다. 나머지는 모두 도미(Bream)로 예측할 것이다.\n","\n","로지스틱 회귀가 학습한 계수를 확인해보자."],"metadata":{"id":"I_KvoTXILPir"}},{"cell_type":"code","source":["print(lr.coef_, lr.intercept_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ug1pTtIxLg-i","executionInfo":{"status":"ok","timestamp":1705381483937,"user_tz":-540,"elapsed":7,"user":{"displayName":"박민호","userId":"13332700724784488473"}},"outputId":"18270efd-aa96-4962-f302-363a329cd3f8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[-0.4037798  -0.57620209 -0.66280298 -1.01290277 -0.73168947]] [-2.16155132]\n"]}]},{"cell_type":"markdown","source":["LogisticRegression 모델로 z 값을 계산해보자. decision_function() 메서드로 z 값을 출력할 수 있다. train_bream_smelr의 처음 5개 샘플의 z값을 출력해보자."],"metadata":{"id":"feTXmN1SLoF_"}},{"cell_type":"code","source":["decisions = lr.decision_function(train_bream_smelt[:5])\n","print(decisions)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BI7DnnlLL-39","executionInfo":{"status":"ok","timestamp":1705381483937,"user_tz":-540,"elapsed":7,"user":{"displayName":"박민호","userId":"13332700724784488473"}},"outputId":"9efa2eb6-936e-4be3-88ad-424ed786ffc0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[-6.02927744  3.57123907 -5.26568906 -4.24321775 -6.0607117 ]\n"]}]},{"cell_type":"markdown","source":["이 z 값을 시그모이드 함수에 통과시키면  확률을 얻을 수 있다. 파이썬의 사이파이 라이브러리에도 시그모이드 함수가 있다. 바로 expit() 이다.\n","np.exp() 함수를 사용해 분수 계산을 하는 것보다 훨씬 편리하고 안전하다.\n","decision 배열의 값을 확률로 변환해보자."],"metadata":{"id":"pVScSdkAMHfD"}},{"cell_type":"code","source":["from scipy.special import expit\n","print(expit(decisions))"],"metadata":{"id":"J9SrHZ1UMqA9","executionInfo":{"status":"ok","timestamp":1705381483937,"user_tz":-540,"elapsed":6,"user":{"displayName":"박민호","userId":"13332700724784488473"}},"outputId":"76e0e889-71db-4d6d-cba9-58653d508def","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0.00240145 0.97264817 0.00513928 0.01415798 0.00232731]\n"]}]},{"cell_type":"markdown","source":["출력된 값을 보면 predict_proba() 메서드 출력의 두 번째 열의 값과 동일하다. 즉 decision_function() 메서드는 양성 클래스에 대한 z값을 반환한다.\n","\n","이진 분류를 위해 2개의 생선 샘플을 골라냈고 이를 사용해 로지스틱 회귀 모델을 훈련했다. 이진 분류일 경우 predict_proba() 메서드는 음성 클래스와 양성 클래스에 대한 확률을 출력한다. 또 decision_function() 메서드는 양성 클래스에 대한 z 값을 계산한다. 또 coef_ 속성과 intercept_ 속성에는 로지스틱 모델이 학습한 선형 방정식의 계수가 들어있다.\n","\n","이진 분류의 경험을 바탕으로 다중 분류 문제로 넘어가 보자.\n"],"metadata":{"id":"NNr2yAKWrVMt"}},{"cell_type":"markdown","source":["### 로지스틱 회귀로 다중 분류 수행하기\n","\n","앞에서 이진 분류를 위해 로지스틱 회귀 모델을 훈련시켜 보았다. 다중 분류도 크게 다르지 않다. LogisticRegression 클래스를 사용해 7개의 생선을 분류해 보면서 이진 분류와 차이점을 알아보자.\n","\n","LogisticRegression 클래스는 기본적으로 반복적인 알고리즘을 사용한다. max_iter 매개변수에서 반복 횟수를 지정하며 기본값은 100입니다. 여기에 준비한 데이터셋을 사용해 모델을 훈련하면 반복 횟수가 부족하다는 경고가 발생한다. 충분하게 훈련시키기 위해 반복 횟수를 1,000으로 늘리겠습니다.\n","\n","또 LogisticRegression은 기본적으로 릿지 회귀와 같이 계수의 제곱을 규제합니다. 이런 규제를 L2 규제라고도 부른다. 릿지 회귀에서는 alpha 매개변수로 규제의 양을 조절했다. alpha가 커지면 규제도 커진다. LogisticRegression에서 규제를 제어하는 매개변수는 C이다. 하지만 C는 alpha와 반대로 작을수록 규제가 커진다. C의 기본값은 1이다. 여기에서는 규제를 조금 완화하기 위해 20으로 늘린다.\n","\n","다음 코드는 LogisticRegression 클래스로 다중 분류 모델을 훈련하는 코드이다. 7개의 생선 데이터가 모두 들어 있는 train_scaled와 train_target을 사용한 점을 인지하자."],"metadata":{"id":"qFtnw46vtT30"}},{"cell_type":"code","source":["lr = LogisticRegression(C=20, max_iter=1000)\n","lr.fit(train_scaled, train_target)\n","print(lr.score(train_scaled, train_target))\n","print(lr.score(test_scaled, test_target))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q5DYzDOBw1sc","executionInfo":{"status":"ok","timestamp":1705383367662,"user_tz":-540,"elapsed":3,"user":{"displayName":"박민호","userId":"13332700724784488473"}},"outputId":"a4da3709-9478-4501-ffd3-846c412f16a9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.9327731092436975\n","0.925\n"]}]},{"cell_type":"markdown","source":["훈련 세트와 테스트 세트에 대한 점수가 높고 과대적합이나 과소적합으로 치우친 것 같지 않다. 그럼 테스트 세트의 처음 5개 샘플에 대한 예측을 출력해보자."],"metadata":{"id":"N_I8M9Lfu2yx"}},{"cell_type":"code","source":["print(lr.predict(test_scaled[:5]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"edjRKim0xu0_","executionInfo":{"status":"ok","timestamp":1705383508688,"user_tz":-540,"elapsed":2,"user":{"displayName":"박민호","userId":"13332700724784488473"}},"outputId":"bf54d5b4-8243-42f2-b5ec-3ec0462ccce4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['Perch' 'Smelt' 'Pike' 'Roach' 'Perch']\n"]}]},{"cell_type":"markdown","source":["이번에는 테스트 세트의 처음 5개의 샘플에 대한 예측 확률을 출력해보자.\n","출력을 간소하게 하기 위해 소수점 네 번째 자리에서 반올림하겠다."],"metadata":{"id":"t0ckWjPox1ir"}},{"cell_type":"code","source":["proba = lr.predict_proba(test_scaled[:5])\n","print(np.round(proba, decimals=3))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SbEtUiTex-rR","executionInfo":{"status":"ok","timestamp":1705383596189,"user_tz":-540,"elapsed":3,"user":{"displayName":"박민호","userId":"13332700724784488473"}},"outputId":"916f67da-5a08-4059-d4e4-4a0ed10d9cac"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0.    0.014 0.841 0.    0.136 0.007 0.003]\n"," [0.    0.003 0.044 0.    0.007 0.946 0.   ]\n"," [0.    0.    0.034 0.935 0.015 0.016 0.   ]\n"," [0.011 0.034 0.306 0.007 0.567 0.    0.076]\n"," [0.    0.    0.904 0.002 0.089 0.002 0.001]]\n"]}]},{"cell_type":"markdown","source":["5개 샘플에 대한 예측이므로 5개의 행이 출력되었다. 또 7개 생선에 대한 확률을 계산했으므로 7개의 열이 출력되었다. 이진 분류일 경우 2개의 열만 있었다.\n","\n","첫 번째 샘플을 보면 세 번째 열의 확률이 가장 높다. 84.1%나 된다. 세 번째 열이 농어에 대한 확률일까? classes_ 속성에서 클래스 정보를 확인해보자."],"metadata":{"id":"484AshboyOMT"}},{"cell_type":"code","source":["print(lr.classes_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h4WZ-C20zY-M","executionInfo":{"status":"ok","timestamp":1705383932718,"user_tz":-540,"elapsed":2,"user":{"displayName":"박민호","userId":"13332700724784488473"}},"outputId":"8cb84814-632d-4587-a193-d7c14fef6b92"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['Bream' 'Parkki' 'Perch' 'Pike' 'Roach' 'Smelt' 'Whitefish']\n"]}]},{"cell_type":"markdown","source":["첫 번째 샘플을 Perch를 가장 높은 확률로 예측했다.  두 번째 샘플은 여섯 번째 열인 Smelt를 가장 높은 확률(94.6%)로 예측했다.\n","\n","다중 분류일 경우 선형 방정식의 모습은 어떤 모습일까?\n","coef_ 와 intercept_의 크기를 출력해보자.\n","\n"],"metadata":{"id":"ANebzfUKzbkX"}},{"cell_type":"code","source":["print(lr.coef_.shape, lr.intercept_.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N4XPwdQW0JHZ","executionInfo":{"status":"ok","timestamp":1705384144340,"user_tz":-540,"elapsed":2,"user":{"displayName":"박민호","userId":"13332700724784488473"}},"outputId":"a24f53ef-4c8d-4787-ae29-4f915c0a87f2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(7, 5) (7,)\n"]}]},{"cell_type":"markdown","source":["이 데이터는 5개의 특성을 사용하므로 coef_ 배열의 열은 5개입니다. 그런데 행이 7이다. intercept_도 7개나 있다. 이 말은 이진 분류에서 보았던 z를 7개나 계산한다는 의미이다. 다중 분류는 클래스마다 z 값을 하나씩 계산한다.\n","\n"," 당연히 가장 높은 z값을 출력하는 클래스가 예측 클래스가 된다. 그럼 확률은 어떻게 계산한 것일까요? 이진 분류에서는 시그모이드 함수를 사용해 z를 0 과 1 사이의 값으로 변환했습니다. 다중 분류는 이와 달리 소프트맥스(softmax) 함수를 사용하여 7개의 z 값을 확률로 변환한다."],"metadata":{"id":"EXchz1pm0P_w"}},{"cell_type":"markdown","source":["소프트맥스도 어렵지 않다.\n","\n","먼저 7개의 z 값의 이름을 z1에서 z7이라고 붙이겠다.\n","z1 ~ z7까지 값을 사용해 지수함수 $e^{z1}$ ~  $e^{z7}$을 계산해 모두 다한다. 이를 e_ sum 이라고 하자.\n","\n","그다음  $e^{z1}$ ~  $e^{z2}$을 각각 e_sum 으로 나누어 주면 된다.\n","\n","그 각각을 s1~ s7이라고 한다.\n","\n","s1에서 s7까지 모두 더하면 분자와 분모가 같아지므로 1이 된다. 7개 생선에 대한 확률의 합은 1이 되어야 하므로 잘 맞는다.\n","\n","이진 분류에서처럼 dedcision_function() 메서드로 z1~ z7의 값을 구해 보자.\n","\n"],"metadata":{"id":"iV0OcYS72wsV"}},{"cell_type":"code","source":["decision = lr.decision_function(test_scaled[:5])\n","print(np.round(decision, decimals=2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"We7rugYC4NJT","executionInfo":{"status":"ok","timestamp":1705385229935,"user_tz":-540,"elapsed":2,"user":{"displayName":"박민호","userId":"13332700724784488473"}},"outputId":"5e6daf80-6178-4bd6-9686-a4d560015a71"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ -6.5    1.03   5.16  -2.73   3.34   0.33  -0.63]\n"," [-10.86   1.93   4.77  -2.4    2.98   7.84  -4.26]\n"," [ -4.34  -6.23   3.17   6.49   2.36   2.42  -3.87]\n"," [ -0.68   0.45   2.65  -1.19   3.26  -5.75   1.26]\n"," [ -6.4   -1.99   5.82  -0.11   3.5   -0.11  -0.71]]\n"]}]},{"cell_type":"markdown","source":["사이파이는 소프트맥스 함수도 제공한다. scipy.special 아래에 softmax() 함수를 임포트해 사용하자."],"metadata":{"id":"MlG5Upfe3X5i"}},{"cell_type":"code","source":["from scipy.special import softmax\n","proba = softmax(decision, axis=1)\n","print(np.round(proba, decimals = 3))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IISwyQ4L4iWv","executionInfo":{"status":"ok","timestamp":1705385382408,"user_tz":-540,"elapsed":353,"user":{"displayName":"박민호","userId":"13332700724784488473"}},"outputId":"17088a2b-ff28-4efd-a807-f11437602ad1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0.    0.014 0.841 0.    0.136 0.007 0.003]\n"," [0.    0.003 0.044 0.    0.007 0.946 0.   ]\n"," [0.    0.    0.034 0.935 0.015 0.016 0.   ]\n"," [0.011 0.034 0.306 0.007 0.567 0.    0.076]\n"," [0.    0.    0.904 0.002 0.089 0.002 0.001]]\n"]}]},{"cell_type":"markdown","source":["앞서 구한 decision 배열을 softmax() 함수에 전달했다. softmax()의 axis 매개변수는 소포트맥스를 계산할 축을 지정한다. 여기에서 axis = 1로 지정하여 각 행, 즉 각 샘플에 대해 소프트 맥스를 계산한다. 만약 axis 매개변수를 지정하지 않으면 배열 전체에 대해 소프트맥슬르 계산한다. 출력 결과를 앞서 구한 proba 배열과 비교해 보면 결과가 정확히 일치한다."],"metadata":{"id":"U8cZFtRX498p"}},{"cell_type":"markdown","source":["#04-2 확률적 경사 하강법"],"metadata":{"id":"mqcOk0KN72Jv"}},{"cell_type":"markdown","source":["##점진적인 학습\n","\n","실무에서는 훈련 데이터가 한 번에 준비되는 것이 아니라 조금씩 전달된다.  이러한 문제를 어떻게 해결할까?\n","기존의 훈련 데이터에 새로운 데이터를 추가하여 모델을 매일매일 다시 훈련하면 어떨까? 이는 좋은 아이디어이지만, 시간이 지날수록 데이터가 늘어난다. 처음 며칠은 괜찮겠지만 몇 달이 지나면 모델을 훈련하기 위해 서버를 늘려야한다. 확실히 이는 지속 가능한 방법은 아니다.\n","\n","또 다른 방법은 새로운 데이터를 추가할 때 이전 데이터를 버림으로써 훈련 데이터를 버림으로써 훈련 데이터 크기를 일정하게 유지하는 것이다.\n","이렇게 하면 데이터셋의 크기가 너무 커지지 않을 수 있다. 하지만 데이터를 버릴 때 다른 데이터에 없는 중요한 생선 데이터가 포함되어 있다면 큰일이다. 앞으로 모델이 그 생선을 제대로 예측하지 못할 것이다.\n","\n","더 좋은 방법이 없을까?\n","\n","위에서 말한 방법은 이전에 훈련한 모델을 버리고 다시 새로운 모델을 훈련하는 방식이다. 앞서 훈련한 모델을 버리지 않고 새로운 데이터에 대해서만 조금씩 더 훈련할 수 없을까? 이렇게 할 수 있다면 훈련에 사용한 데이터를 모두 유지할 필요도 없고 앞서 학습한 생선을 까먹을 일도 없을 것이다.\n","\n","이런 식의 훈련 방식을 점진적 학습 또는 온라인 학습이라고 부른다. 대표적인 점진적 학습 알고리즘은 확률적 경사 하강법(Stochastic Gradient Descent)이다."],"metadata":{"id":"Jl_UzTUhckT-"}},{"cell_type":"markdown","source":["###확률적 경사 하강법\n","\n","확률적 경사 하강법에서 확률적이란 말은 '무작위하게' 혹은 '랜덤하게'의 기술적인 표현이다. '경사'는 기울기를 말하고 '하강법'은 내려가는 방법이다. 경사 하강법은 경사를 따라 내려가는 방법이다.\n","\n","가장 가파른 경사를 따라 원하는 지점에 도달하는 것이 목표이다.\n","하지만 가장 가파른 길을 찾아 내려오지만 조금씩 내려오는 것이 중요하다.\n","\n","그렇다면 경사 항강법으로 내려올때 가장 가파른 길을 찾는 방법은 무엇일까?\n","훈련 세트를 사용해 모델을 훈련하기 때문에 경사 하강법도 당연히 훈련 세트를 사용하여 가장 가파른 길을 찾을 것이다.\n","그런데 전체 샘플을 사용하지 않고 딱 하나의 샘플을 훈련 세트에서 랜덤하게 골라 가장 가파른 길을 찾는다. 이처럼 훈련 세트에서 랜덤하게 하나의 샘플을 고르는 것이 확률적 경사 하강법이다.\n","\n","<br>\n","\n","\n","자세히 말하면 확률적 경사 하강법은 훈련 세트에서 랜덤하게 하나의 샘플을 선택하여 가파른 경사를 조금 내려간다. 그다음 훈련세트에서 랜덤하게 또 다른 샘플을 하나 선택하여 경사를 조금 내려간다. 이런 식으로 전체 샘플을 모두 사용할 때까지 계속한다.\n","\n","샘플을 사용해도 다 내려오지 못했다면?\n","처음부터 다시 시작한다! 훈련 세트에 샘플을 다시 채워 넣는다.그리고 다시 반복한다. 이렇게 만족할만한 위치에 도달할 때까지 계속 내려간다. 확률적 경사 하강법에서 훈련 세트를 한 번 모두 사용하는 과정을 에포크(epoch)라고 부른다. 일반적으로 경사 하강법은 수십, 수백 번 이상 에포크를 수행한다.\n","\n","\n"],"metadata":{"id":"-hgUYzASeq1j"}},{"cell_type":"markdown","source":["그리고 여러개의 샘플을 사용해 경사 하강법을 수행하는 방식을 미니배치 경사 하강법(minibatch gradient descent)이라고 한다. 실전에서 아주 많이 사용한다.\n","극단적으로 한 번 경사로를 따라 이동하기 위해 전체 샘플을 사용할 수도 있다. 이를 배치 경사 하강법(bath gradient descent)이라고 부른다. 사실 전체 데이터를 사용하기 때문에 가장 안정적인 방법이 될 수 있다. 하지만 그만큼 컴퓨터 자원을 많이 사용하게 된다.\n","\n","하지만 우리는 지금 어디에서 가장 빠른 길을 찾아 내려가려고 하는 것일까?\n","그것은 바로 손실함수이다."],"metadata":{"id":"04Zn8mReiJww"}},{"cell_type":"markdown","source":["### 손실 함수\n","**손실 함수(loss function)**는 어떤 문제에서 머신러닝 알고리즘이 얼마나 엉터리인지 측정하는 기준이다.\n","그렇기에 손실 함수의 값이 작을수록 좋다. 하지만 어떤 값이 최솟값인지는 알지 못한다. 가능한 많이 찾아보고 만족할만한 수준이라면 산을 다 내려왔다고 인정해야한다. 다행히 우리가 다루는 많은 문제에 필요한 손실 함수는 이미 정의되어 있다.\n","\n","> 비용 함수(cost function)는 손실 함수의 다른 말이다. 엄밀히 말하면 손실 함수는 샘플 하나에 대한 손실을 정의하고 비용함수는 훈련 세트에 있는 모든 샘플에 대한 손실 함수의 합을 말한다. 하지만 보통 이 둘을 엄격히 구분하지 않고 섞어서 사용한다."],"metadata":{"id":"UtQwpIauj3St"}},{"cell_type":"markdown","source":["분류에서는 손실은 아주 확실하다. 바로 정답을 못 맞히는 것이다. 4개의 예측 중에 2개만 맞으면 정확도는 1/2 = 0.5이다. 정확도를 손실 함수로 사용할 수 있을까? 정확도에는 치명적인 단점이 있다. 4개의 샘플만 있다면 가능한 정확도는 0, 0.25, 0.5, 0.75, 1 다섯 가지뿐이다. 정확도가 이렇게 듬성듬성 하다면 경사 하강버을 이용해 조금씩 움직일 수 없다. 경사는 확실히 연속적이여야 한다.\n","\n","> 기술적으로 말하면 손실 함수는 미분 가능해야한다.\n","\n","로지스틱 회귀에서는 예측은 0 또는 1이지만 확률은 0~1 사이의 어떤 값도 될 수 있다. 즉 연속적이다. 샘플 4개의 예측 확률을 0.9, 0.3, 0.2, 0.8\n","이라고 가정해보자.\n"],"metadata":{"id":"uflwaAtRk2PE"}},{"cell_type":"markdown","source":["### 로지스틱 손실함수\n","\n","첫 번째 샘플의 예측은 0.9이고 양성 클래스의 타깃인 1과 곱한 다음 음수로 바꾼다. 이 경우 예측이 1에 가까울 수록 좋은 모델이다. 예측이 1에 가까울 소록 예측과 타깃의 곱의 음수는 작아진다. 이를 손실 함수로 사용한다.\n","\n","두 번째 샘플의 예측은 0.3이다 양성 클래스인데 이를 음수로 바꾸면 첫 번째 손실보다 높다.\n","\n","세 번째 샘플의 타깃은 음성 클래스라 0이다. 이 값을 예측 확률인 0.2와 그대로 곱하면 무조건 0이 되어 곤란하다. 한 가지 방법으로 양성 클래스 처럼 바꾸어 1로 만들어 예측값도 양성 클래스에 대한 예측으로 바꾸는 것이다. 즉 1-0.2 = 0.8로 사용하는 것이다. 이후 음수로 바꾸는 것은 동일하다.  세 번째 샘플은 손실이 -0.8로 낮게 나왔다.\n","\n","네 번째 샘플도 타깃은 음성 클래스 이다. 같은 방식으로 하면 -0.2의 손실을 가진다.\n","\n","여기에 로그 함수를 적용하면 더 좋다. 예측 확률의 0~1 사이인데 로그 함수는 이 사이에서 음수가 되므로 최종 손실 값은 양수가 된다. 또 로그 함수는 0에 가까울수록 아주 큰 음수가 되기 때문에 손실을 아주 크게 만들어 모델이 큰 영향을 줄 수 있다.\n","\n"],"metadata":{"id":"RkThVppTm8A1"}},{"cell_type":"markdown","source":["양성 클래스(타깃 = 1)일 때 손실은 -log(예측 확률)로 계산한다. 확률이 1에서 멀어져 0에 가까워 질 수록 손실은 아주 큰 양수가 된다.\n","음성 클래스 (타깃 = 0)일 때 손실은 -log(1-예측 확률)로 계산한다.\n","이 예측 확률이 0 에서 멀어져 1에 가까워 질수록 손실은 아주 큰 양수가 된다.\n","\n","이러한 손실 함수를 로지스틱 손실 함수(logistic loss function)라고 한다. 또는 이진 크로스엔트로피 손실 함수(binary cross entropy loss function)라고도 한다.\n","\n","여기에서는 이진 분류를 예로 들어 설명했지만 다중 분류도 매우 비슷한 손실 함수를 사용한다. 다중 분류에서 사용하는 손실 함수는 크로스엔트로피 손실 함수(cross-entropy loss function)라고 부른다.\n","\n","> 그렇다면 회귀에는 어떤 손실함수를 사용할까?  회귀의 손실 함수로는 평균 절댓값 오차를 사용할 수 있다. 타깃에서 예측을 뺀 절댓값을 모든 샘플에 평균한 값이다. 또는 평균 제곱 오차(mean squared error)를 많이 사용한다. 타깃에서 예측을 뺀 값을 제곱한 다음 모든 샘플에 평균한 값이다."],"metadata":{"id":"IMxgdYRkqUi9"}},{"cell_type":"markdown","source":["##SGDClassifier"],"metadata":{"id":"xsgEMXYBs00K"}},{"cell_type":"code","source":["import pandas as pd\n","fish = pd.read_csv('https://bit.ly/fish_csv_data')"],"metadata":{"id":"l6mvHNoVs3hS","executionInfo":{"status":"ok","timestamp":1705415812459,"user_tz":-540,"elapsed":1270,"user":{"displayName":"박민호","userId":"13332700724784488473"}}},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":["Species 열을 제외한 나머지 5개는 입력 데이터로 사용한다. Species 열은 타깃 데이터다."],"metadata":{"id":"AMwZvwIztAsK"}},{"cell_type":"code","source":["fish_input = fish[['Weight','Length','Diagonal','Height','Width']].to_numpy()\n","fish_target = fish['Species'].to_numpy()"],"metadata":{"id":"ALsi6Ze4tJSw","executionInfo":{"status":"ok","timestamp":1705415881782,"user_tz":-540,"elapsed":512,"user":{"displayName":"박민호","userId":"13332700724784488473"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["사이킷런의 train_test_split() 함수를 사용해 이 데이터를 훈련 세트와 테스트 세트로 나눈다."],"metadata":{"id":"Sy-P8jG1tUkY"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","train_input, test_input, train_target, test_target = train_test_split(fish_input, fish_target, random_state=42)"],"metadata":{"id":"1Vfk4VcRta3S","executionInfo":{"status":"ok","timestamp":1705415981498,"user_tz":-540,"elapsed":2,"user":{"displayName":"박민호","userId":"13332700724784488473"}}},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":["이제 훈련 세트와 테스트 세트의 특성을 표준화 전처리한다."],"metadata":{"id":"v7FH1e8CtsME"}},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","ss = StandardScaler()\n","ss.fit(train_input)\n","train_scaled = ss.transform(train_input)\n","test_scaled = ss.transform(test_input)"],"metadata":{"id":"A-Jv8xhXtvGr","executionInfo":{"status":"ok","timestamp":1705416068355,"user_tz":-540,"elapsed":330,"user":{"displayName":"박민호","userId":"13332700724784488473"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["from sklearn.linear_model import SGDClassifier\n","sc = SGDClassifier(loss= 'log', max_iter=10, random_state=42)\n","sc.fit(train_scaled, train_target)\n","print(sc.score(train_scaled, train_target))\n","print(sc.score(test_scaled, test_target))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TP23LeMuuGGw","executionInfo":{"status":"ok","timestamp":1705416172878,"user_tz":-540,"elapsed":2,"user":{"displayName":"박민호","userId":"13332700724784488473"}},"outputId":"2c210866-81ba-4ad8-ba60-c49c35625386"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["0.773109243697479\n","0.775\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_stochastic_gradient.py:163: FutureWarning: The loss 'log' was deprecated in v1.1 and will be removed in version 1.3. Use `loss='log_loss'` which is equivalent.\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_stochastic_gradient.py:702: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.\n","  warnings.warn(\n"]}]},{"cell_type":"markdown","source":["앞서 이야기한 것처럼 확률적 경사 하강법은 점진적 학습이 가능하다. SGDClassifier 객체를 다시 만들지 않고 훈련한 모델을 sc로 추가로 훈련해보자. 모델을 이어서 훈련할 때는 partial_fit() 메서드를 사용한다.\n","이 메서드는 fit() 메서드와 사용법이 같지만 호출할 때마다 1 에포크씩 이어서 훈련할 수 있다. partial_fit() 메서드를 호출하고 다시 훈련 세트와 테스트 세트의 점수를 확인해보자."],"metadata":{"id":"wjaJVJXZud2I"}},{"cell_type":"code","source":["sc.partial_fit(train_scaled, train_target)\n","print(sc.score(train_scaled, train_target))\n","print(sc.score(test_scaled, test_target))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Mkedejtyu7ul","executionInfo":{"status":"ok","timestamp":1705416322265,"user_tz":-540,"elapsed":3,"user":{"displayName":"박민호","userId":"13332700724784488473"}},"outputId":"4af9d91e-e6be-4d7e-ad47-f5c1e405bf8f"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["0.8151260504201681\n","0.85\n"]}]},{"cell_type":"markdown","source":["아직 점수가 낮지만 에포크를 한 번 더 실행하니 정확도가 향상되었다. 이 모델을 여러 에포크에서 더 훈련해 볼 필요가 있다. 하지만 얼마나 더 훈련해야할까? 무작정 많이 반복할 수 없으니 어떤 기준이 필요하다."],"metadata":{"id":"QoWt4W_4vAlL"}},{"cell_type":"markdown","source":["##에포크와 과대/과소적합\n","에포크 획수가 적으면 모델이 훈련 세트를 덜 학습한다. 에포크 횟수가 충분히 많으면 훈련 세트를 완전히 학습할 것이다.\n","\n","훈련 세트 점수는 에포크가 진행될수록 꾸준히 증가하지만 테스트 세트 점수는 어느 순간 감소하기 시작한다. 바로 이 지점이 모델이 과대적합 되기 시작하는 곳이다. 과대 적합이 시작하기 전에 훈련을 멈추는 것이 조기 종료(early stopping)라고 한다.\n","\n","이 예제에서는 fit()메서드를 사용하지 않고 partial_fit() 메서드만 사용한다. partial_fit() 메서드만 사용하려면 훈련 세트에 있는 전체 클래스의 레이블을 partial_fit() 메서드에 전달해 주어야한다. 이를 위해 np.unique() 함수로 train_target에 있는 7개 생선의 목록을 만든다. 또 에포크 마다 훈련 세트와 테스트 세트에 대한 점수를 기록하기 위해 2개의 리스트를 준비한다."],"metadata":{"id":"F9m58nlPvMeL"}},{"cell_type":"code","source":["import numpy as np\n","sc = SGDClassifier(loss='log', random_state=42)\n","train_score = []\n","test_score = []\n","classes = np.unique(train_target)"],"metadata":{"id":"04OWhowPw-Kl","executionInfo":{"status":"ok","timestamp":1705417043044,"user_tz":-540,"elapsed":2,"user":{"displayName":"박민호","userId":"13332700724784488473"}}},"execution_count":10,"outputs":[]},{"cell_type":"markdown","source":["300번의 에포크 동안 훈련을 반복하여 진행해보자. 반복마다 훈련 세트와 테스트 세트의 점수를 계산하여 train_score, test_score 리스트에 추가한다."],"metadata":{"id":"Y4nGTsKjxI_u"}},{"cell_type":"code","source":["for _ in range(300):\n","    sc.partial_fit(train_scaled, train_target, classes=classes)\n","    train_score.append(sc.score(train_scaled, train_target))\n","    test_score.append(sc.score(test_scaled, test_target))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pwSgvGb9xRrf","executionInfo":{"status":"ok","timestamp":1705417048095,"user_tz":-540,"elapsed":1641,"user":{"displayName":"박민호","userId":"13332700724784488473"}},"outputId":"38cf473e-9327-4151-b802-2661cfe74e3c"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_stochastic_gradient.py:163: FutureWarning: The loss 'log' was deprecated in v1.1 and will be removed in version 1.3. Use `loss='log_loss'` which is equivalent.\n","  warnings.warn(\n"]}]},{"cell_type":"markdown","source":["300번의 에포크 동안 기록한 훈련 세트와 테스트 세트의 점수를 그래프로 그려보자"],"metadata":{"id":"_5EycI_Nxz48"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","plt.plot(train_score)\n","plt.plot(test_score)\n","plt.xlabel('epoch')\n","plt.ylabel('accuracy')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"id":"xg9eYy0nx8Jd","executionInfo":{"status":"ok","timestamp":1705417103621,"user_tz":-540,"elapsed":616,"user":{"displayName":"박민호","userId":"13332700724784488473"}},"outputId":"834da641-4b8e-4505-de57-8d52b5693407"},"execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["데이터가 작기 때문에 아주 잘 드러나지는 않지만, 백 번째 에포크 이후에는 훈련 세트와 테스트 세트의 점수가 조금씩 벌어지고 있다. 또 확실히 에포크 초키에는 과소적합되어 훈련 세트와 테스트 세트의 점수가 낮다. 이 모델의 경우 백 번째 에포크가 적절한 횟수로 보인다.\n","\n","그럼 SGDClassifier의 반복 횟수를 100에 맞추고 모델을 다시 훈련해 보자.\n","그리고 최종적으로 훈련 세트와 테스트 세트에서 점수를 출력하자."],"metadata":{"id":"MLyZ5yEryDAO"}},{"cell_type":"code","source":["sc = SGDClassifier(loss='log', max_iter = 100, tol=None, random_state=42)\n","sc.fit(train_scaled, train_target)\n","print(sc.score(train_scaled, train_target))\n","print(sc.score(test_scaled, test_target))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"83dXUxi9yZVK","executionInfo":{"status":"ok","timestamp":1705417270356,"user_tz":-540,"elapsed":3,"user":{"displayName":"박민호","userId":"13332700724784488473"}},"outputId":"9b30f5ca-03c1-4bb0-8e36-f2f7c1b10a86"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["0.957983193277311\n","0.925\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_stochastic_gradient.py:163: FutureWarning: The loss 'log' was deprecated in v1.1 and will be removed in version 1.3. Use `loss='log_loss'` which is equivalent.\n","  warnings.warn(\n"]}]},{"cell_type":"markdown","source":["SGDClassifier는 일정 에포크 동안 성능이 향상되지 않으면 더 훈련하지 않고 자동으로 멈춘다. tol 매개변수에서 향상될 최솟값을 지정한다. 앞의 코드에서는 tol 매개변수를 None으로 지정하여 자동으로 멈추지 않고 max_iter=100 만큼 무조건 반복하도록 하였다.\n","\n","최종 점수가 좋게 나왔당!\n","\n","> SGDRegressor는 확률적 경사 하강법을 사용한 회귀 알고리즘을 제공한다.\n","\n","이 섹션을 마무리하기 전에 SGDClassifier의 loss 매개변수를 잠시 알아보자.\n","사실 loss 매개변수의 기본값은 'hinge'이다. 힌지 손실(hinge loss)은 서포트 벡터 머신(support vector machine)이라 불리는 또 다른 머신러닝 알고리즘을 위한 손실 함수이다. 여기에서는 힌지 손실과 서포트 벡터 머신에 대해 더 자세히 다루지 않는다. 하지만 서포트 벡터 머신이 널리 사용하는 머신러닝 알고리즘 중 하나라는 점과 SGDClassifier가 여러 종류의 손실 함수를 loss 매개변수에 지정하여 다양한 머신러닝 알고리즘을 지원한다는 것만 기억하자."],"metadata":{"id":"E1kSMM_iy1g9"}}]}